@page "/favorite-cities"
@inject WeatherService WeatherService
@inject NavigationManager NavigationManager
@inject MongoDBService MongoDBService
@inject IJSRuntime JSRuntime
@using BlazorWasmApp.Models

<div class="app-container">
    <div class="app-header">
        <h1>Your Favorite Cities</h1>
        <p>Click on a city to view detailed weather information or remove it from your list.</p>
    </div>

    @if (favoriteCities != null && favoriteCities.Any())
    {
        <div class="app-city-list">
            @foreach (var favorite in favoriteCities)
            {
                <div class="app-city-item">
                    <div>
                        <h4>@favorite</h4>
                        @if (cityWeatherData.ContainsKey(favorite))
                        {
                            <p><strong>Temp:</strong> @cityWeatherData[favorite].main.temp °C</p>
                            <p><strong>Desc:</strong> @cityWeatherData[favorite].weather.First().description</p>
                        }
                        else
                        {
                            <p>Loading weather...</p>
                        }
                    </div>
                    <div>
                        <button class="app-city-button" @onclick="() => ShowWeather(favorite)">Details</button>
                        <button class="app-delete-button" @onclick="() => DeleteCity(favorite)">Remove</button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="app-empty-message">You have no favorite cities. Add some to view their weather here!</p>
    }

    @if (selectedCity != null && weatherData != null)
    {
        <div class="app-weather-container">
            <h2>Weather in @weatherData.name</h2>
            <p class="app-weather-info"><strong>Temperature:</strong> @weatherData.main.temp °C</p>
            <p class="app-weather-info"><strong>Feels Like:</strong> @weatherData.main.feels_like °C</p>
            <p class="app-weather-info"><strong>Humidity:</strong> @weatherData.main.humidity %</p>
            <p class="app-weather-info"><strong>Description:</strong> @weatherData.weather.First().description</p>
            <img src="https://openweathermap.org/img/w/@($"{weatherData.weather.First().icon}.png")" 
                 alt="Weather Icon" class="app-weather-icon" />
            <button class="app-back-button" @onclick="CloseWeather">Close</button>
        </div>
    }
</div>

@code {
    private List<string>? favoriteCities; // List of favorite city names
    private Dictionary<string, WeatherResponse> cityWeatherData = new(); // City weather data cache
    private WeatherResponse? weatherData; // Detailed weather data for selected city
    private string? selectedCity; // The currently selected city

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch favorite cities from MongoDB and map to List<string> (city names)
            var favoriteCityObjects = await MongoDBService.GetFavoriteCitiesAsync();
            favoriteCities = favoriteCityObjects.Select(city => city.Name).ToList(); // Map to List<string> with city names

            // Load weather preview for each city
            if (favoriteCities.Any())
            {
                foreach (var city in favoriteCities)
                {
                    await LoadWeatherPreview(city);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading favorite cities: {ex.Message}");
        }
    }

    private async Task LoadWeatherPreview(string city)
    {
        try
        {
            // Fetch weather data for each city to show a preview
            var weather = await WeatherService.GetWeatherAsync(city);
            if (weather != null)
            {
                cityWeatherData[city] = weather; // Cache weather data for each city
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather for {city}: {ex.Message}");
        }
    }

    private async Task ShowWeather(string city)
    {
        try
        {
            // Show detailed weather data for the selected city
            selectedCity = city;
            weatherData = await WeatherService.GetWeatherAsync(city);

            if (weatherData == null)
            {
                Console.WriteLine("Error retrieving weather data.");
                await JSRuntime.InvokeVoidAsync("showToast", "Error retrieving weather data.", "error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing weather: {ex.Message}");
        }
    }

    private async Task DeleteCity(string city)
    {
        try
        {
            // Remove city from favorites and delete weather data
            if (favoriteCities != null && favoriteCities.Contains(city))
            {
                await MongoDBService.RemoveFavoriteCityAsync(city); // Remove from MongoDB
                favoriteCities.Remove(city); // Remove from local list
                cityWeatherData.Remove(city); // Remove cached weather data

                // If the selected city is removed, clear the selection
                if (selectedCity == city)
                {
                    selectedCity = null;
                    weatherData = null;
                }

                await JSRuntime.InvokeVoidAsync("showToast", $"{city} has been removed from favorites.", "success");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing city: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "Error removing city.", "error");
        }
    }

    private void CloseWeather()
    {
        // Close the detailed weather view
        selectedCity = null;
        weatherData = null;
    }
}
